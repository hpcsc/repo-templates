#!/usr/bin/env bash

set -eo pipefail

get_os() {
    local os
    os=$(uname -s)
    case "${os}" in
        Linux*)     echo linux;;
        Darwin*)    echo macos;;
        *)          (>&2 echo "unsupported OS: ${os}" && exit 1)
    esac
}

get_arch() {
    local arch
    arch=$(uname -m)
    case "${arch}" in
        aarch64*)   echo arm64;;
        arm64*)     echo arm64;;
        x86_64*)    echo amd64;;
        *)          (>&2 echo "unsupported CPU architecture: ${arch}" && exit 1)
    esac
}

get_download_url() {
    local version="$1"
    local os
    os=$(get_os)
    local arch
    arch=$(get_arch)

    curl -s "https://api.github.com/repos/{{.Scaffold.GithubOwner}}/{{.Scaffold.GithubRepo}}/releases/tags/${version}" | \
        jq -r '.assets[] |
                    select(.name | contains("{{.Scaffold.GithubRepo}}") and contains("'${os}'") and contains("'${arch}'")) |
                    .browser_download_url'
}

download() {
    local install_path="$1"

    read -r url

    mkdir -p ${install_path}/bin

    echo "Download from ${url} to ${install_path}"
    curl -L "${url}" -o "${install_path}/bin/{{.Scaffold.GithubRepo}}"
    chmod +x "${install_path}/bin/{{.Scaffold.GithubRepo}}"

    # # Use below code if target artifact is in archive format (tar/gz)
    # if [[ "${url}" =~ \.zip ]]; then
    #     curl -L "${url}" -o /tmp/{{.Scaffold.GithubRepo}}.zip
    #     unzip /tmp/{{.Scaffold.GithubRepo}}.zip -d /tmp/{{.Scaffold.GithubRepo}}
    #     mv -v /tmp/{{.Scaffold.GithubRepo}}/*/* ${install_path}/bin
    #     rm -rfv /tmp/{{.Scaffold.GithubRepo}} /tmp/{{.Scaffold.GithubRepo}}.zip
    #     ${install_path}/bin/{{.Scaffold.GithubRepo}} version
    #     return
    # fi

    # if [[ "${url}" =~ \.tar.gz ]]; then
    #     curl -L "${url}" | tar --strip-components=1 -xzvf - -C ${install_path}/bin
    #     ${install_path}/bin/{{.Scaffold.GithubRepo}} version
    #     return
    # fi

    # echo "unsupported archive format"
    # exit 1
}

# append `v` to version number. `v` was stripped off when doing `asdf list-all` for compatibility with `asdf latest`
VERSION="v${ASDF_INSTALL_VERSION}"
get_download_url "${VERSION}" | \
    download "${ASDF_INSTALL_PATH}"
